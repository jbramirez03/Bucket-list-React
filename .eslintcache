[{"/Users/jason/Documents/classwork/Bucket-list-React/src/index.js":"1","/Users/jason/Documents/classwork/Bucket-list-React/src/App.js":"2","/Users/jason/Documents/classwork/Bucket-list-React/src/components/BucketList.js":"3","/Users/jason/Documents/classwork/Bucket-list-React/src/components/BucketForm.js":"4","/Users/jason/Documents/classwork/Bucket-list-React/src/components/Bucket.js":"5"},{"size":197,"mtime":1634397137167,"results":"6","hashOfConfig":"7"},{"size":192,"mtime":1634397137163,"results":"8","hashOfConfig":"7"},{"size":2037,"mtime":1634403013177,"results":"9","hashOfConfig":"7"},{"size":2569,"mtime":1634402955634,"results":"10","hashOfConfig":"7"},{"size":1088,"mtime":1634403464201,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"188u6j",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jason/Documents/classwork/Bucket-list-React/src/index.js",[],["24","25"],"/Users/jason/Documents/classwork/Bucket-list-React/src/App.js",[],"/Users/jason/Documents/classwork/Bucket-list-React/src/components/BucketList.js",["26"],"import React, { useState } from 'react';\nimport BucketForm from './BucketForm';\nimport Bucket from './Bucket';\n\nfunction BucketList() {\n  const [bucket, setBucket] = useState([]);\n\n  // Function to add a bucket list item\n  const addBucketItem = (item) => {\n\n    // TODO: Write logic to add the new bucket item to the bucket state variable\n    setBucket([...bucket, item]);\n\n  };\n\n  // Function to mark bucket list item as complete\n  const completeBucketItem = (id) => {\n    // If the ID passed to this function matches the ID of the item that was clicked, mark it as complete\n    let updatedBucket = bucket.map((item) => {\n\n      // TODO: Write logic that marks an item as complete or incomplete when invoked\n      item.id === id ? item.isComplete = true : item.isComplete = false\n    });\n\n    setBucket(updatedBucket);\n  };\n\n  // Function to remove bucket list item and update state\n  const removeBucketItem = (id) => {\n    // TODO: Write logic that will return an array of items that don't contain the ID passed to this function\n    let remainingBucket = bucket.filter(item => item.id !== id);\n\n    //   // TODO: Update the bucket state variable\n    setBucket(remainingBucket);\n  };\n\n  // Function to edit the bucket list item\n  const editBucketItem = (itemId, newValue) => {\n    // Make sure that the value isn't empty\n    if (!newValue.text) {\n      return;\n    }\n\n    // We use the \"prev\" argument provided with the useState hook to map through our list of items\n    // We then check to see if the item ID matches the id of the item that was clicked and if so, we set it to a new value\n    setBucket((prev) =>\n      prev.map((item) => (item.id === itemId ? newValue : item))\n    );\n  };\n\n  return (\n    <div>\n      <h1>What is on your bucket list?</h1>\n      <BucketForm onSubmit={addBucketItem} />\n      <Bucket\n        bucket={bucket}\n        completeBucketItem={completeBucketItem}\n        removeBucketItem={removeBucketItem}\n        editBucketItem={editBucketItem}\n      ></Bucket>\n    </div>\n  );\n}\n\nexport default BucketList;\n","/Users/jason/Documents/classwork/Bucket-list-React/src/components/BucketForm.js",[],"/Users/jason/Documents/classwork/Bucket-list-React/src/components/Bucket.js",[],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":19,"column":43,"nodeType":"33","messageId":"34","endLine":19,"endColumn":45},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]